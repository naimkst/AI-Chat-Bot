{"version":3,"file":"index.js","names":["opts?: CreateBuilderOptions<TErrorShape>","opts: {\n  router: TRouter;\n  /**\n   * @remarks In order to obey by Effect conventions, we have omitted the `config.fetch` and `config.logLevel` options.\n   * You can provide these layers on your own if you need to.\n   *\n   * @example\n   * ```ts\n   * import { Effect, Layer, Logger, LogLevel } from \"effect\";\n   * import { HttpClient } from \"@effect/platform\";\n\n   * // Set logLevel\n   * Logger.withMinimumLogLevel(LogLevel.Debug)\n   *   \n   * // Override fetch implementation\n   * Layer.succeed(\n   *   HttpClient.Fetch,\n   *   myFetchImplementation,\n   * );\n   * ```\n   */\n  config?: Omit<RouteHandlerConfig, \"fetch\" | \"logLevel\">;\n}"],"sources":["../src/effect-platform.ts"],"sourcesContent":["import * as HttpRouter from \"@effect/platform/HttpRouter\";\nimport * as HttpServerRequest from \"@effect/platform/HttpServerRequest\";\nimport * as Effect from \"effect/Effect\";\nimport * as Layer from \"effect/Layer\";\n\nimport type { Json } from \"@uploadthing/shared\";\n\nimport { configProvider } from \"./_internal/config\";\nimport { AdapterArguments, createRequestHandler } from \"./_internal/handler\";\nimport type { CreateBuilderOptions } from \"./_internal/upload-builder\";\nimport { createBuilder } from \"./_internal/upload-builder\";\nimport type { FileRouter, RouteHandlerConfig } from \"./types\";\n\nexport {\n  UTFiles,\n  /**\n   * This is an experimental feature.\n   * You need to be feature flagged on our backend to use this\n   */\n  UTRegion as experimental_UTRegion,\n} from \"./_internal/types\";\nexport type { FileRouter };\n\ntype AdapterArgs = {\n  req: HttpServerRequest.HttpServerRequest;\n};\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<AdapterArgs, TErrorShape>(opts);\n\nexport const createRouteHandler = <TRouter extends FileRouter>(opts: {\n  router: TRouter;\n  /**\n   * @remarks In order to obey by Effect conventions, we have omitted the `config.fetch` and `config.logLevel` options.\n   * You can provide these layers on your own if you need to.\n   *\n   * @example\n   * ```ts\n   * import { Effect, Layer, Logger, LogLevel } from \"effect\";\n   * import { HttpClient } from \"@effect/platform\";\n\n   * // Set logLevel\n   * Logger.withMinimumLogLevel(LogLevel.Debug)\n   *   \n   * // Override fetch implementation\n   * Layer.succeed(\n   *   HttpClient.Fetch,\n   *   myFetchImplementation,\n   * );\n   * ```\n   */\n  config?: Omit<RouteHandlerConfig, \"fetch\" | \"logLevel\">;\n}) => {\n  const router = Effect.runSync(\n    createRequestHandler<TRouter>(opts, \"effect-platform\"),\n  );\n\n  return HttpRouter.provideServiceEffect(\n    router,\n    AdapterArguments,\n    Effect.map(\n      HttpServerRequest.HttpServerRequest,\n      (serverRequest) =>\n        ({\n          req: serverRequest,\n        }) satisfies AdapterArgs,\n    ),\n  ).pipe(Effect.provide(Layer.setConfigProvider(configProvider(opts.config))));\n};\n"],"mappings":";;;;;;;;;;AA2BA,MAAa,oBAAoB,CAC/BA,SACG,cAAwC,KAAK;AAElD,MAAa,qBAAqB,CAA6BC,SAsBzD;CACJ,MAAM,SAAS,OAAO,QACpB,qBAA8B,MAAM,kBAAkB,CACvD;AAED,QAAO,WAAW,qBAChB,QACA,kBACA,OAAO,IACL,kBAAkB,mBAClB,CAAC,mBACE,EACC,KAAK,cACN,GACJ,CACF,CAAC,KAAK,OAAO,QAAQ,MAAM,kBAAkB,eAAe,KAAK,OAAO,CAAC,CAAC,CAAC;AAC7E"}