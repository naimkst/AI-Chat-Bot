{"version":3,"file":"to-web-request-DhP0wXG-.js","names":["attemptedUrl: string","base?: string","req: IncomingMessageLike","baseUrl","method: string","opts: {\n  req: IncomingMessageLike & {\n    on: (event: string, listener: (data: any) => void) => void;\n  };\n}","body?: any"],"sources":["../src/_internal/to-web-request.ts"],"sourcesContent":["import * as Config from \"effect/Config\";\nimport * as Data from \"effect/Data\";\nimport * as Effect from \"effect/Effect\";\n\nimport { UploadThingError } from \"@uploadthing/shared\";\n\ntype IncomingMessageLike = {\n  method?: string | undefined;\n  url?: string | undefined;\n  headers?: Record<string, string | string[] | undefined>;\n  body?: any;\n};\n\nclass InvalidURL extends Data.Error<{\n  reason: string;\n}> {\n  readonly _tag = \"InvalidURL\";\n  readonly name = \"InvalidURLError\";\n  constructor(attemptedUrl: string, base?: string) {\n    Effect.runSync(\n      Effect.logError(\n        `Failed to parse URL from request. '${attemptedUrl}' is not a valid URL with base '${base}'.`,\n      ),\n    );\n    super({\n      reason: `Failed to parse URL from request. '${attemptedUrl}' is not a valid URL with base '${base}'.`,\n    });\n  }\n}\n\nconst parseURL = (req: IncomingMessageLike): Effect.Effect<URL, InvalidURL> => {\n  const headers = req.headers;\n  let relativeUrl = req.url ?? \"/\";\n  if (\"baseUrl\" in req && typeof req.baseUrl === \"string\") {\n    relativeUrl = req.baseUrl + relativeUrl;\n  }\n\n  const proto = headers?.[\"x-forwarded-proto\"] ?? \"http\";\n  const host = headers?.[\"x-forwarded-host\"] ?? headers?.host;\n\n  const baseUrl = Config.string(\"url\").pipe(\n    Config.withDefault(`${proto.toString()}://${host?.toString()}`),\n  );\n\n  return Effect.flatMap(baseUrl, (baseUrl) =>\n    Effect.try({\n      try: () => new URL(relativeUrl, baseUrl),\n      catch: () => new InvalidURL(relativeUrl, baseUrl),\n    }),\n  ).pipe(\n    Effect.catchTag(\"ConfigError\", () =>\n      Effect.fail(new InvalidURL(relativeUrl)),\n    ),\n  );\n};\n\nconst isBodyAllowed = (method: string) =>\n  [\"POST\", \"PUT\", \"PATCH\"].includes(method);\n\nexport const getPostBody = <TBody = unknown>(opts: {\n  req: IncomingMessageLike & {\n    on: (event: string, listener: (data: any) => void) => void;\n  };\n}) =>\n  Effect.async<TBody | undefined, UploadThingError>((resume) => {\n    const { req } = opts;\n    if (!req.method || !isBodyAllowed(req.method)) {\n      return resume(Effect.succeed(undefined));\n    }\n    const contentType = req.headers?.[\"content-type\"];\n\n    if (\"body\" in req) {\n      if (contentType !== \"application/json\") {\n        Effect.runSync(\n          Effect.logError(\"Expected JSON content type, got:\", contentType),\n        );\n        return resume(\n          new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_CONTENT_TYPE\",\n          }),\n        );\n      }\n\n      if (typeof req.body !== \"object\") {\n        Effect.runSync(\n          Effect.logError(\n            \"Expected body to be of type 'object', got:\",\n            typeof req.body,\n          ),\n        );\n        return resume(\n          new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_BODY\",\n          }),\n        );\n      }\n\n      Effect.runSync(Effect.logDebug(\"Body parsed successfully.\", req.body));\n      return resume(Effect.succeed(req.body as TBody));\n    }\n\n    let body = \"\";\n    req.on(\"data\", (data) => (body += data));\n    req.on(\"end\", () => {\n      const parsedBody = Effect.try({\n        try: () => JSON.parse(body) as TBody,\n        catch: (err) =>\n          new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_JSON\",\n            cause: err,\n          }),\n      });\n      return resume(parsedBody);\n    });\n  });\n\nexport const toWebRequest = (\n  req: IncomingMessageLike,\n  body?: any,\n): Effect.Effect<Request, never> => {\n  body ??= req.body;\n  const bodyStr = typeof body === \"string\" ? body : JSON.stringify(body);\n  const method = req.method ?? \"GET\";\n  const allowsBody = isBodyAllowed(method);\n\n  const headers = new Headers();\n  for (const [key, value] of Object.entries(req.headers ?? [])) {\n    if (typeof value === \"string\") headers.set(key, value);\n    if (Array.isArray(value)) headers.set(key, value.join(\",\"));\n  }\n\n  return parseURL(req).pipe(\n    Effect.catchTag(\"InvalidURL\", (e) => Effect.die(e)),\n    Effect.andThen(\n      (url) =>\n        new Request(url, {\n          method,\n          headers,\n          ...(allowsBody ? { body: bodyStr } : {}),\n        }),\n    ),\n  );\n};\n"],"mappings":";;;;;;AAaA,IAAM,aAAN,cAAyB,KAAK,MAE3B;CACD,AAAS,OAAO;CAChB,AAAS,OAAO;CAChB,YAAYA,cAAsBC,MAAe;AAC/C,SAAO,QACL,OAAO,UACJ,qCAAqC,aAAa,kCAAkC,KAAK,IAC3F,CACF;AACD,QAAM,EACJ,SAAS,qCAAqC,aAAa,kCAAkC,KAAK,IACnG,EAAC;CACH;AACF;AAED,MAAM,WAAW,CAACC,QAA6D;CAC7E,MAAM,UAAU,IAAI;CACpB,IAAI,cAAc,IAAI,OAAO;AAC7B,KAAI,aAAa,cAAc,IAAI,YAAY,SAC7C,eAAc,IAAI,UAAU;CAG9B,MAAM,QAAQ,UAAU,wBAAwB;CAChD,MAAM,OAAO,UAAU,uBAAuB,SAAS;CAEvD,MAAM,UAAU,OAAO,OAAO,MAAM,CAAC,KACnC,OAAO,aAAa,EAAE,MAAM,UAAU,CAAC,KAAK,MAAM,UAAU,CAAC,EAAE,CAChE;AAED,QAAO,OAAO,QAAQ,SAAS,CAACC,cAC9B,OAAO,IAAI;EACT,KAAK,MAAM,IAAI,IAAI,aAAaA;EAChC,OAAO,MAAM,IAAI,WAAW,aAAaA;CAC1C,EAAC,CACH,CAAC,KACA,OAAO,SAAS,eAAe,MAC7B,OAAO,KAAK,IAAI,WAAW,aAAa,CACzC,CACF;AACF;AAED,MAAM,gBAAgB,CAACC,WACrB;CAAC;CAAQ;CAAO;AAAQ,EAAC,SAAS,OAAO;AAE3C,MAAa,cAAc,CAAkBC,SAK3C,OAAO,MAA2C,CAAC,WAAW;CAC5D,MAAM,EAAE,KAAK,GAAG;AAChB,MAAK,IAAI,WAAW,cAAc,IAAI,OAAO,CAC3C,QAAO,OAAO,OAAO,eAAkB,CAAC;CAE1C,MAAM,cAAc,IAAI,UAAU;AAElC,KAAI,UAAU,KAAK;AACjB,MAAI,gBAAgB,oBAAoB;AACtC,UAAO,QACL,OAAO,SAAS,oCAAoC,YAAY,CACjE;AACD,UAAO,OACL,IAAI,iBAAiB;IACnB,MAAM;IACN,SAAS;GACV,GACF;EACF;AAED,aAAW,IAAI,SAAS,UAAU;AAChC,UAAO,QACL,OAAO,SACL,qDACO,IAAI,KACZ,CACF;AACD,UAAO,OACL,IAAI,iBAAiB;IACnB,MAAM;IACN,SAAS;GACV,GACF;EACF;AAED,SAAO,QAAQ,OAAO,SAAS,6BAA6B,IAAI,KAAK,CAAC;AACtE,SAAO,OAAO,OAAO,QAAQ,IAAI,KAAc,CAAC;CACjD;CAED,IAAI,OAAO;AACX,KAAI,GAAG,QAAQ,CAAC,SAAU,QAAQ,KAAM;AACxC,KAAI,GAAG,OAAO,MAAM;EAClB,MAAM,aAAa,OAAO,IAAI;GAC5B,KAAK,MAAM,KAAK,MAAM,KAAK;GAC3B,OAAO,CAAC,QACN,IAAI,iBAAiB;IACnB,MAAM;IACN,SAAS;IACT,OAAO;GACR;EACJ,EAAC;AACF,SAAO,OAAO,WAAW;CAC1B,EAAC;AACH,EAAC;AAEJ,MAAa,eAAe,CAC1BH,KACAI,SACkC;AAClC,UAAS,IAAI;CACb,MAAM,iBAAiB,SAAS,WAAW,OAAO,KAAK,UAAU,KAAK;CACtE,MAAM,SAAS,IAAI,UAAU;CAC7B,MAAM,aAAa,cAAc,OAAO;CAExC,MAAM,UAAU,IAAI;AACpB,MAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,IAAI,WAAW,CAAE,EAAC,EAAE;AAC5D,aAAW,UAAU,SAAU,SAAQ,IAAI,KAAK,MAAM;AACtD,MAAI,MAAM,QAAQ,MAAM,CAAE,SAAQ,IAAI,KAAK,MAAM,KAAK,IAAI,CAAC;CAC5D;AAED,QAAO,SAAS,IAAI,CAAC,KACnB,OAAO,SAAS,cAAc,CAAC,MAAM,OAAO,IAAI,EAAE,CAAC,EACnD,OAAO,QACL,CAAC,QACC,IAAI,QAAQ,KAAK;EACf;EACA;EACA,GAAI,aAAa,EAAE,MAAM,QAAS,IAAG,CAAE;CACxC,GACJ,CACF;AACF"}