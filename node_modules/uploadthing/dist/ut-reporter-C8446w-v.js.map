{"version":3,"file":"ut-reporter-C8446w-v.js","names":["resolve!: (value: T) => void","reject!: (reason?: any) => void","length: number","config: {\n  /**\n   * URL to the UploadThing API endpoint\n   * @example URL { /api/uploadthing }\n   * @example URL { https://www.example.com/api/uploadthing }\n   */\n  url: URL;\n  slug: string;\n  actionType: typeof ActionType.Type;\n}","cfg: {\n    url: URL;\n    endpoint: string;\n    package?: string | undefined;\n    headers: HeadersInit | (() => MaybePromise<HeadersInit>) | undefined;\n    traceHeaders: TraceHeaders;\n  }"],"sources":["../src/_internal/deferred.ts","../src/_internal/random-hex.ts","../src/_internal/ut-reporter.ts"],"sourcesContent":["export type Deferred<T> = {\n  resolve: (value: T) => void;\n  reject: (reason?: any) => void;\n  ac: AbortController;\n  promise: Promise<T>;\n};\n\nexport const createDeferred = <T>(): Deferred<T> => {\n  let resolve!: (value: T) => void;\n  let reject!: (reason?: any) => void;\n  const ac = new AbortController();\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { promise, ac, resolve, reject };\n};\n","export const randomHexString = (function () {\n  const characters = \"abcdef0123456789\";\n  const charactersLength = characters.length;\n  return function (length: number) {\n    let result = \"\";\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n})();\n\nexport type TraceHeaders = {\n  b3: string;\n  traceparent: string;\n};\n\nexport const generateTraceHeaders = (): TraceHeaders => {\n  const traceId = randomHexString(32);\n  const spanId = randomHexString(16);\n  const sampled = \"01\";\n\n  return {\n    b3: `${traceId}-${spanId}-${sampled}`,\n    traceparent: `00-${traceId}-${spanId}-${sampled}`,\n  };\n};\n","import { unsafeCoerce } from \"effect/Function\";\nimport * as Micro from \"effect/Micro\";\n\nimport type { FetchContext, MaybePromise } from \"@uploadthing/shared\";\nimport {\n  fetchEff,\n  getErrorTypeFromStatusCode,\n  parseResponseJson,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport * as pkgJson from \"../../package.json\";\nimport type { TraceHeaders } from \"./random-hex\";\nimport type { ActionType } from \"./shared-schemas\";\nimport type { UTEvents } from \"./types\";\n\nconst createAPIRequestUrl = (config: {\n  /**\n   * URL to the UploadThing API endpoint\n   * @example URL { /api/uploadthing }\n   * @example URL { https://www.example.com/api/uploadthing }\n   */\n  url: URL;\n  slug: string;\n  actionType: typeof ActionType.Type;\n}) => {\n  const url = new URL(config.url);\n\n  const queryParams = new URLSearchParams(url.search);\n  queryParams.set(\"actionType\", config.actionType);\n  queryParams.set(\"slug\", config.slug);\n\n  url.search = queryParams.toString();\n  return url;\n};\n\nexport type UTReporter = <TEvent extends keyof UTEvents>(\n  type: TEvent,\n  payload: UTEvents[TEvent][\"in\"],\n) => Micro.Micro<UTEvents[TEvent][\"out\"], UploadThingError, FetchContext>;\n\n/**\n * Creates a \"client\" for reporting events to the UploadThing server via the user's API endpoint.\n * Events are handled in \"./handler.ts starting at L112\"\n */\nexport const createUTReporter =\n  (cfg: {\n    url: URL;\n    endpoint: string;\n    package?: string | undefined;\n    headers: HeadersInit | (() => MaybePromise<HeadersInit>) | undefined;\n    traceHeaders: TraceHeaders;\n  }): UTReporter =>\n  (type, payload) =>\n    Micro.gen(function* () {\n      const url = createAPIRequestUrl({\n        url: cfg.url,\n        slug: cfg.endpoint,\n        actionType: type,\n      });\n      const headers = new Headers(\n        yield* Micro.promise(async () =>\n          typeof cfg.headers === \"function\" ? await cfg.headers() : cfg.headers,\n        ),\n      );\n      if (cfg.package) {\n        headers.set(\"x-uploadthing-package\", cfg.package);\n      }\n      headers.set(\"x-uploadthing-version\", pkgJson.version);\n      headers.set(\"Content-Type\", \"application/json\");\n      headers.set(\"b3\", cfg.traceHeaders.b3);\n      headers.set(\"traceparent\", cfg.traceHeaders.traceparent);\n\n      const response = yield* fetchEff(url, {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n        headers,\n      }).pipe(\n        Micro.andThen(parseResponseJson),\n        /**\n         * We don't _need_ to validate the response here, just cast it for now.\n         * As of now, @effect/schema includes quite a few bytes we cut out by this...\n         * We have \"strong typing\" on the backend that ensures the shape should match.\n         */\n        Micro.map(unsafeCoerce<unknown, UTEvents[typeof type][\"out\"]>),\n        Micro.catchTag(\"FetchError\", (e) =>\n          Micro.fail(\n            new UploadThingError({\n              code: \"INTERNAL_CLIENT_ERROR\",\n              message: `Failed to report event \"${type}\" to UploadThing server`,\n              cause: e,\n            }),\n          ),\n        ),\n        Micro.catchTag(\"BadRequestError\", (e) =>\n          Micro.fail(\n            new UploadThingError({\n              code: getErrorTypeFromStatusCode(e.status),\n              message: e.getMessage(),\n              cause: e.json,\n            }),\n          ),\n        ),\n        Micro.catchTag(\"InvalidJson\", (e) =>\n          Micro.fail(\n            new UploadThingError({\n              code: \"INTERNAL_CLIENT_ERROR\",\n              message: \"Failed to parse response from UploadThing server\",\n              cause: e,\n            }),\n          ),\n        ),\n      );\n\n      return response;\n    });\n"],"mappings":";;;;;;AAOA,MAAa,iBAAiB,MAAsB;CAClD,IAAIA;CACJ,IAAIC;CACJ,MAAM,KAAK,IAAI;CACf,MAAM,UAAU,IAAI,QAAW,CAAC,KAAK,QAAQ;AAC3C,YAAU;AACV,WAAS;CACV;AACD,QAAO;EAAE;EAAS;EAAI;EAAS;CAAQ;AACxC;;;;AChBD,MAAa,kBAAkB,AAAC,WAAY;CAC1C,MAAM,aAAa;CACnB,MAAM,mBAAmB,WAAW;AACpC,QAAO,SAAUC,QAAgB;EAC/B,IAAI,SAAS;AACb,OAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,IAC1B,WAAU,WAAW,OAAO,KAAK,MAAM,KAAK,QAAQ,GAAG,iBAAiB,CAAC;AAE3E,SAAO;CACR;AACF,GAAG;AAOJ,MAAa,uBAAuB,MAAoB;CACtD,MAAM,UAAU,gBAAgB,GAAG;CACnC,MAAM,SAAS,gBAAgB,GAAG;CAClC,MAAM,UAAU;AAEhB,QAAO;EACL,KAAK,EAAE,QAAQ,GAAG,OAAO,GAAG,QAAQ;EACpC,cAAc,KAAK,QAAQ,GAAG,OAAO,GAAG,QAAQ;CACjD;AACF;;;;ACVD,MAAM,sBAAsB,CAACC,WASvB;CACJ,MAAM,MAAM,IAAI,IAAI,OAAO;CAE3B,MAAM,cAAc,IAAI,gBAAgB,IAAI;AAC5C,aAAY,IAAI,cAAc,OAAO,WAAW;AAChD,aAAY,IAAI,QAAQ,OAAO,KAAK;AAEpC,KAAI,SAAS,YAAY,UAAU;AACnC,QAAO;AACR;;;;;AAWD,MAAa,mBACX,CAACC,QAOD,CAAC,MAAM,YACL,MAAM,IAAI,aAAa;CACrB,MAAM,MAAM,oBAAoB;EAC9B,KAAK,IAAI;EACT,MAAM,IAAI;EACV,YAAY;CACb,EAAC;CACF,MAAM,UAAU,IAAI,QAClB,OAAO,MAAM,QAAQ,mBACZ,IAAI,YAAY,aAAa,MAAM,IAAI,SAAS,GAAG,IAAI,QAC/D;AAEH,KAAI,IAAI,QACN,SAAQ,IAAI,yBAAyB,IAAI,QAAQ;AAEnD,SAAQ,IAAI,iCAAyC;AACrD,SAAQ,IAAI,gBAAgB,mBAAmB;AAC/C,SAAQ,IAAI,MAAM,IAAI,aAAa,GAAG;AACtC,SAAQ,IAAI,eAAe,IAAI,aAAa,YAAY;CAExD,MAAM,WAAW,OAAO,SAAS,KAAK;EACpC,QAAQ;EACR,MAAM,KAAK,UAAU,QAAQ;EAC7B;CACD,EAAC,CAAC;EACD,MAAM,QAAQ,kBAAkB;;;;;;EAMhC,MAAM,IAAI,aAAoD;EAC9D,MAAM,SAAS,cAAc,CAAC,MAC5B,MAAM,KACJ,IAAI,iBAAiB;GACnB,MAAM;GACN,UAAU,0BAA0B,KAAK;GACzC,OAAO;EACR,GACF,CACF;EACD,MAAM,SAAS,mBAAmB,CAAC,MACjC,MAAM,KACJ,IAAI,iBAAiB;GACnB,MAAM,2BAA2B,EAAE,OAAO;GAC1C,SAAS,EAAE,YAAY;GACvB,OAAO,EAAE;EACV,GACF,CACF;EACD,MAAM,SAAS,eAAe,CAAC,MAC7B,MAAM,KACJ,IAAI,iBAAiB;GACnB,MAAM;GACN,SAAS;GACT,OAAO;EACR,GACF,CACF;EACF;AAED,QAAO;AACR,EAAC"}