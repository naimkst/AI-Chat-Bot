{"version":3,"file":"shared-schemas-BIFDoqPF.js","names":[],"sources":["../src/_internal/shared-schemas.ts"],"sourcesContent":["import * as S from \"effect/Schema\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { ValidACLs, ValidContentDispositions } from \"@uploadthing/shared\";\n\nexport const ContentDispositionSchema = S.Literal(...ValidContentDispositions);\nexport const ACLSchema = S.Literal(...ValidACLs);\n\n/**\n * Valid options for the `?actionType` query param\n */\nexport const ActionType = S.Literal(\"upload\");\n\n/**\n * Valid options for the `uploadthing-hook` header\n * for requests coming from UT server\n */\nexport const UploadThingHook = S.Literal(\"callback\", \"error\");\n\n/**\n * =============================================================================\n * =========================== Configuration ===================================\n * =============================================================================\n */\nconst DecodeString = S.transform(S.Uint8ArrayFromSelf, S.String, {\n  decode: (data) => new TextDecoder().decode(data),\n  encode: (data) => new TextEncoder().encode(data),\n});\n\nexport const ParsedToken = S.Struct({\n  apiKey: S.Redacted(S.String.pipe(S.startsWith(\"sk_\"))),\n  appId: S.String,\n  regions: S.NonEmptyArray(S.String),\n  ingestHost: S.String.pipe(\n    S.optionalWith({ default: () => \"ingest.uploadthing.com\" }),\n  ),\n});\n\nexport const UploadThingToken = S.Uint8ArrayFromBase64.pipe(\n  S.compose(DecodeString),\n  S.compose(S.parseJson(ParsedToken)),\n);\n\n/**\n * =============================================================================\n * ======================== File Type Hierarchy ===============================\n * =============================================================================\n */\n\n/**\n * Properties from the web File object, this is what the client sends when initiating an upload\n */\nexport class FileUploadData extends S.Class<FileUploadData>(\"FileUploadData\")({\n  name: S.String,\n  size: S.Number,\n  type: S.String,\n  lastModified: S.Number.pipe(S.optional),\n}) {}\n\n/**\n * `.middleware()` can add a customId to the incoming file data\n */\nexport class FileUploadDataWithCustomId extends FileUploadData.extend<FileUploadDataWithCustomId>(\n  \"FileUploadDataWithCustomId\",\n)({\n  customId: S.NullOr(S.String),\n}) {}\n\n/**\n * When files are uploaded, we get back\n * - a key\n * - URLs for the file\n * - the hash (md5-hex) of the uploaded file's contents\n */\nexport class UploadedFileData extends FileUploadDataWithCustomId.extend<UploadedFileData>(\n  \"UploadedFileData\",\n)({\n  key: S.String,\n  /**\n   * @deprecated\n   * This field will be removed in uploadthing v9. Use `ufsUrl` instead.\n   */\n  url: S.String,\n  /**\n   * @deprecated\n   * This field will be removed in uploadthing v9. Use `ufsUrl` instead.\n   */\n  appUrl: S.String,\n  ufsUrl: S.String,\n  fileHash: S.String,\n}) {}\n\n/**\n * When the client has uploaded a file and polled for data returned by `.onUploadComplete()`\n */\nexport interface ClientUploadedFileData<T> extends UploadedFileData {\n  /**\n   * Matches what's returned from the serverside `onUploadComplete` callback\n   */\n  readonly serverData: T;\n}\n\n/**\n * =============================================================================\n * ======================== Server Response Schemas ============================\n * =============================================================================\n */\n\nexport class NewPresignedUrl extends S.Class<NewPresignedUrl>(\n  \"NewPresignedUrl\",\n)({\n  url: S.String,\n  key: S.String,\n  customId: S.NullOr(S.String),\n  name: S.String,\n}) {}\n\nexport class MetadataFetchStreamPart extends S.Class<MetadataFetchStreamPart>(\n  \"MetadataFetchStreamPart\",\n)({\n  payload: S.String,\n  signature: S.String,\n  hook: UploadThingHook,\n}) {}\n\nexport class MetadataFetchResponse extends S.Class<MetadataFetchResponse>(\n  \"MetadataFetchResponse\",\n)({\n  ok: S.Boolean,\n}) {}\n\nexport class CallbackResultResponse extends S.Class<CallbackResultResponse>(\n  \"CallbackResultResponse\",\n)({\n  ok: S.Boolean,\n}) {}\n\n/**\n * =============================================================================\n * ======================== Client Action Payloads ============================\n * =============================================================================\n */\n\nexport class UploadActionPayload extends S.Class<UploadActionPayload>(\n  \"UploadActionPayload\",\n)({\n  files: S.Array(FileUploadData),\n  input: S.Unknown as S.Schema<Json>,\n}) {}\n"],"mappings":";;;;AAKA,MAAa,2BAA2B,EAAE,QAAQ,GAAG,yBAAyB;AAC9E,MAAa,YAAY,EAAE,QAAQ,GAAG,UAAU;;;;AAKhD,MAAa,aAAa,EAAE,QAAQ,SAAS;;;;;AAM7C,MAAa,kBAAkB,EAAE,QAAQ,YAAY,QAAQ;;;;;;AAO7D,MAAM,eAAe,EAAE,UAAU,EAAE,oBAAoB,EAAE,QAAQ;CAC/D,QAAQ,CAAC,SAAS,IAAI,cAAc,OAAO,KAAK;CAChD,QAAQ,CAAC,SAAS,IAAI,cAAc,OAAO,KAAK;AACjD,EAAC;AAEF,MAAa,cAAc,EAAE,OAAO;CAClC,QAAQ,EAAE,SAAS,EAAE,OAAO,KAAK,EAAE,WAAW,MAAM,CAAC,CAAC;CACtD,OAAO,EAAE;CACT,SAAS,EAAE,cAAc,EAAE,OAAO;CAClC,YAAY,EAAE,OAAO,KACnB,EAAE,aAAa,EAAE,SAAS,MAAM,yBAA0B,EAAC,CAC5D;AACF,EAAC;AAEF,MAAa,mBAAmB,EAAE,qBAAqB,KACrD,EAAE,QAAQ,aAAa,EACvB,EAAE,QAAQ,EAAE,UAAU,YAAY,CAAC,CACpC;;;;;;;;;AAWD,IAAa,iBAAb,cAAoC,EAAE,MAAsB,iBAAiB,CAAC;CAC5E,MAAM,EAAE;CACR,MAAM,EAAE;CACR,MAAM,EAAE;CACR,cAAc,EAAE,OAAO,KAAK,EAAE,SAAS;AACxC,EAAC,CAAC,CAAE;;;;AAKL,IAAa,6BAAb,cAAgD,eAAe,OAC7D,6BACD,CAAC,EACA,UAAU,EAAE,OAAO,EAAE,OAAO,CAC7B,EAAC,CAAC,CAAE;;;;;;;AAQL,IAAa,mBAAb,cAAsC,2BAA2B,OAC/D,mBACD,CAAC;CACA,KAAK,EAAE;CAKP,KAAK,EAAE;CAKP,QAAQ,EAAE;CACV,QAAQ,EAAE;CACV,UAAU,EAAE;AACb,EAAC,CAAC,CAAE;AA2BL,IAAa,0BAAb,cAA6C,EAAE,MAC7C,0BACD,CAAC;CACA,SAAS,EAAE;CACX,WAAW,EAAE;CACb,MAAM;AACP,EAAC,CAAC,CAAE;AAEL,IAAa,wBAAb,cAA2C,EAAE,MAC3C,wBACD,CAAC,EACA,IAAI,EAAE,QACP,EAAC,CAAC,CAAE;AAEL,IAAa,yBAAb,cAA4C,EAAE,MAC5C,yBACD,CAAC,EACA,IAAI,EAAE,QACP,EAAC,CAAC,CAAE;;;;;;AAQL,IAAa,sBAAb,cAAyC,EAAE,MACzC,sBACD,CAAC;CACA,OAAO,EAAE,MAAM,eAAe;CAC9B,OAAO,EAAE;AACV,EAAC,CAAC,CAAE"}