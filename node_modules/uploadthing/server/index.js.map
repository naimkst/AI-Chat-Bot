{"version":3,"file":"index.js","names":["parts: BlobPart[]","name: string","options?: UTFilePropertyBag","file: FileEsque","presigned: { key: string; url: string }","HttpClient","UploadThingError","Effect","UploadThingError","_url: MaybeUrl | UrlWithOverrides","HttpClient","Effect","file: FileEsque","cd: ContentDisposition","acl: ACL | undefined","opts: {\n    contentDisposition?: ContentDisposition | undefined;\n    acl?: ACL | undefined;\n  }","options?: UTApiOptions","pathname: `/${string}`","body: Record<string, unknown>","responseSchema: S.Schema<T, any>","UPLOADTHING_VERSION","Effect","UploadThingError","program: Effect.Effect<\n      A,\n      UploadThingError | ParseError | HttpClientError.HttpClientError,\n      HttpClient.HttpClient\n    >","signal?: AbortSignal","files: FileEsque | FileEsque[]","opts?: UploadFilesOptions","program: Effect.Effect<\n      UploadFileResult | UploadFileResult[],\n      never,\n      HttpClient.HttpClient\n    >","urls: MaybeUrl | UrlWithOverrides | (MaybeUrl | UrlWithOverrides)[]","keys: string[] | string","opts?: DeleteFilesOptions","opts?: GetFileUrlsOptions","opts?: ListFilesOptions","updates: RenameFileUpdate | RenameFileUpdate[]","key: string","opts?: GetSignedURLOptions","keys: string | string[]","acl: ACL","opts?: ACLUpdateOptions","opts?: CreateBuilderOptions<TErrorShape>","opts: RouteHandlerOptions<TRouter>","extractRouterConfig","router: FileRouter"],"sources":["../src/sdk/ut-file.ts","../src/_internal/upload-server.ts","../src/sdk/utils.ts","../src/sdk/index.ts","../src/server.ts"],"sourcesContent":["import { lookup } from \"@uploadthing/mime-types\";\n\ninterface UTFilePropertyBag extends BlobPropertyBag {\n  lastModified?: number | undefined;\n  customId?: string | undefined;\n}\n\n/**\n * Extension of the Blob class that simplifies setting the `name` and `customId` properties,\n * similar to the built-in File class from Node > 20.\n */\nexport class UTFile extends Blob {\n  name: string;\n  lastModified: number;\n  customId: string | undefined;\n\n  constructor(parts: BlobPart[], name: string, options?: UTFilePropertyBag) {\n    const optionsWithDefaults = {\n      ...options,\n      type: options?.type ?? (lookup(name) || \"application/octet-stream\"),\n      lastModified: options?.lastModified ?? Date.now(),\n    };\n    super(parts, optionsWithDefaults);\n    this.name = name;\n    this.customId = optionsWithDefaults.customId;\n    this.lastModified = optionsWithDefaults.lastModified;\n  }\n}\n","import * as HttpClient from \"@effect/platform/HttpClient\";\nimport * as HttpClientRequest from \"@effect/platform/HttpClientRequest\";\nimport * as Effect from \"effect/Effect\";\nimport { unsafeCoerce } from \"effect/Function\";\n\nimport { UploadThingError } from \"@uploadthing/shared\";\n\nimport { version } from \"../../package.json\";\nimport type { FileEsque } from \"../sdk/types\";\nimport { logDeprecationWarning } from \"./deprecations\";\nimport { logHttpClientError } from \"./logger\";\nimport type { UploadPutResult } from \"./types\";\n\nexport const uploadWithoutProgress = (\n  file: FileEsque,\n  presigned: { key: string; url: string },\n) =>\n  Effect.gen(function* () {\n    const formData = new FormData();\n    formData.append(\"file\", file as Blob);\n\n    const httpClient = (yield* HttpClient.HttpClient).pipe(\n      HttpClient.filterStatusOk,\n    );\n    const json = yield* HttpClientRequest.put(presigned.url).pipe(\n      HttpClientRequest.bodyFormData(formData),\n      HttpClientRequest.setHeader(\"Range\", \"bytes=0-\"),\n      HttpClientRequest.setHeader(\"x-uploadthing-version\", version),\n      httpClient.execute,\n      Effect.tapError(logHttpClientError(\"Failed to upload file\")),\n      Effect.mapError(\n        (e) =>\n          new UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: \"Failed to upload file\",\n            cause: e,\n          }),\n      ),\n      Effect.andThen((_) => _.json),\n      Effect.andThen(unsafeCoerce<unknown, UploadPutResult>),\n      Effect.scoped,\n    );\n\n    yield* Effect.logDebug(`File ${file.name} uploaded successfully`).pipe(\n      Effect.annotateLogs(\"json\", json),\n    );\n\n    return {\n      ...json,\n      get url() {\n        logDeprecationWarning(\n          \"`file.url` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\",\n        );\n        return json.url;\n      },\n      get appUrl() {\n        logDeprecationWarning(\n          \"`file.appUrl` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\",\n        );\n        return json.appUrl;\n      },\n    };\n  });\n","import * as HttpClient from \"@effect/platform/HttpClient\";\nimport * as HttpClientRequest from \"@effect/platform/HttpClientRequest\";\nimport * as Effect from \"effect/Effect\";\nimport * as Predicate from \"effect/Predicate\";\n\nimport {\n  generateKey,\n  generateSignedURL,\n  UploadThingError,\n} from \"@uploadthing/shared\";\nimport type {\n  ACL,\n  ContentDisposition,\n  Json,\n  MaybeUrl,\n  SerializedUploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { IngestUrl, UTToken } from \"../_internal/config\";\nimport { uploadWithoutProgress } from \"../_internal/upload-server\";\nimport type { UploadedFileData } from \"../types\";\nimport type { FileEsque, UrlWithOverrides } from \"./types\";\nimport { UTFile } from \"./ut-file\";\n\nexport function guardServerOnly() {\n  if (typeof window !== \"undefined\") {\n    throw new UploadThingError({\n      code: \"INTERNAL_SERVER_ERROR\",\n      message: \"The `utapi` can only be used on the server.\",\n    });\n  }\n}\n\nexport const downloadFile = (\n  _url: MaybeUrl | UrlWithOverrides,\n): Effect.Effect<UTFile, SerializedUploadThingError, HttpClient.HttpClient> =>\n  Effect.gen(function* () {\n    let url = Predicate.isRecord(_url) ? _url.url : _url;\n    if (typeof url === \"string\") {\n      // since dataurls will result in name being too long, tell the user\n      // to use uploadFiles instead.\n      if (url.startsWith(\"data:\")) {\n        return yield* Effect.fail({\n          code: \"BAD_REQUEST\",\n          message:\n            \"Please use uploadFiles() for data URLs. uploadFilesFromUrl() is intended for use with remote URLs only.\",\n          data: undefined,\n        } satisfies SerializedUploadThingError);\n      }\n    }\n    url = new URL(url);\n\n    const {\n      name = url.pathname.split(\"/\").pop() ?? \"unknown-filename\",\n      customId = undefined,\n    } = Predicate.isRecord(_url) ? _url : {};\n    const httpClient = (yield* HttpClient.HttpClient).pipe(\n      HttpClient.filterStatusOk,\n    );\n\n    const arrayBuffer = yield* HttpClientRequest.get(url).pipe(\n      HttpClientRequest.modify({ headers: {} }),\n      httpClient.execute,\n      Effect.flatMap((_) => _.arrayBuffer),\n      Effect.mapError((cause) => {\n        return {\n          code: \"BAD_REQUEST\",\n          message: `Failed to download requested file: ${cause.message}`,\n          data: cause.toJSON() as Json,\n        } satisfies SerializedUploadThingError;\n      }),\n      Effect.scoped,\n    );\n\n    return new UTFile([arrayBuffer], name, {\n      customId,\n      lastModified: Date.now(),\n    });\n  }).pipe(Effect.withLogSpan(\"downloadFile\"));\n\nconst generatePresignedUrl = (\n  file: FileEsque,\n  cd: ContentDisposition,\n  acl: ACL | undefined,\n) =>\n  Effect.gen(function* () {\n    const { apiKey, appId } = yield* UTToken;\n    const baseUrl = yield* IngestUrl(undefined);\n\n    const key = yield* generateKey(file, appId);\n\n    const url = yield* generateSignedURL(`${baseUrl}/${key}`, apiKey, {\n      // ttlInSeconds: routeOptions.presignedURLTTL,\n      data: {\n        \"x-ut-identifier\": appId,\n        \"x-ut-file-name\": file.name,\n        \"x-ut-file-size\": file.size,\n        \"x-ut-file-type\": file.type,\n        \"x-ut-custom-id\": file.customId,\n        \"x-ut-content-disposition\": cd,\n        \"x-ut-acl\": acl,\n      },\n    });\n    return { url, key };\n  }).pipe(Effect.withLogSpan(\"generatePresignedUrl\"));\n\nexport const uploadFile = (\n  file: FileEsque,\n  opts: {\n    contentDisposition?: ContentDisposition | undefined;\n    acl?: ACL | undefined;\n  },\n): Effect.Effect<\n  UploadedFileData,\n  SerializedUploadThingError,\n  HttpClient.HttpClient\n> =>\n  Effect.gen(function* () {\n    const presigned = yield* generatePresignedUrl(\n      file,\n      opts.contentDisposition ?? \"inline\",\n      opts.acl,\n    ).pipe(\n      Effect.catchTag(\"UploadThingError\", (e) =>\n        Effect.fail(UploadThingError.toObject(e)),\n      ),\n      Effect.catchTag(\"ConfigError\", () =>\n        Effect.fail({\n          code: \"INVALID_SERVER_CONFIG\",\n          message: \"Failed to generate presigned URL\",\n        } satisfies SerializedUploadThingError),\n      ),\n    );\n    const response = yield* uploadWithoutProgress(file, presigned).pipe(\n      Effect.catchTag(\"UploadThingError\", (e) =>\n        Effect.fail(UploadThingError.toObject(e)),\n      ),\n      Effect.catchTag(\"ResponseError\", (e) =>\n        Effect.fail({\n          code: \"UPLOAD_FAILED\",\n          message: \"Failed to upload file\",\n          data: e.toJSON() as Json,\n        } satisfies SerializedUploadThingError),\n      ),\n    );\n\n    return {\n      key: presigned.key,\n      url: response.url,\n      appUrl: response.appUrl,\n      ufsUrl: response.ufsUrl,\n      lastModified: file.lastModified ?? Date.now(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      customId: file.customId ?? null,\n      fileHash: response.fileHash,\n    };\n  }).pipe(Effect.withLogSpan(\"uploadFile\"));\n","import type * as FetchHttpClient from \"@effect/platform/FetchHttpClient\";\nimport * as HttpClient from \"@effect/platform/HttpClient\";\nimport type * as HttpClientError from \"@effect/platform/HttpClientError\";\nimport * as HttpClientRequest from \"@effect/platform/HttpClientRequest\";\nimport * as HttpClientResponse from \"@effect/platform/HttpClientResponse\";\nimport * as Arr from \"effect/Array\";\nimport * as Cause from \"effect/Cause\";\nimport * as Effect from \"effect/Effect\";\nimport type { ManagedRuntime } from \"effect/ManagedRuntime\";\nimport type { ParseError } from \"effect/ParseResult\";\nimport * as Redacted from \"effect/Redacted\";\nimport * as S from \"effect/Schema\";\n\nimport type { ACL, FetchEsque, MaybeUrl } from \"@uploadthing/shared\";\nimport {\n  generateSignedURL,\n  parseTimeToSeconds,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport {\n  ApiUrl,\n  UfsAppIdLocation,\n  UfsHost,\n  UPLOADTHING_VERSION,\n  UTToken,\n} from \"../_internal/config\";\nimport { logHttpClientError, logHttpClientResponse } from \"../_internal/logger\";\nimport { makeRuntime } from \"../_internal/runtime\";\nimport type {\n  ACLUpdateOptions,\n  DeleteFilesOptions,\n  FileEsque,\n  GetFileUrlsOptions,\n  GetSignedURLOptions,\n  ListFilesOptions,\n  RenameFileUpdate,\n  UploadFileResult,\n  UploadFilesOptions,\n  UrlWithOverrides,\n  UTApiOptions,\n} from \"./types\";\nimport { UTFile } from \"./ut-file\";\nimport { downloadFile, guardServerOnly, uploadFile } from \"./utils\";\n\nexport { UTFile };\n\nexport class UTApi {\n  private fetch: FetchEsque;\n  private defaultKeyType: \"fileKey\" | \"customId\";\n  private runtime: ManagedRuntime<\n    HttpClient.HttpClient | FetchHttpClient.Fetch,\n    UploadThingError\n  >;\n  private opts: UTApiOptions;\n  constructor(options?: UTApiOptions) {\n    // Assert some stuff\n    guardServerOnly();\n    this.opts = options ?? {};\n    this.fetch = this.opts.fetch ?? globalThis.fetch;\n    this.defaultKeyType = this.opts.defaultKeyType ?? \"fileKey\";\n    this.runtime = makeRuntime(this.fetch, this.opts);\n  }\n\n  private requestUploadThing = <T>(\n    pathname: `/${string}`,\n    body: Record<string, unknown>,\n    responseSchema: S.Schema<T, any>,\n  ) =>\n    Effect.gen(this, function* () {\n      const { apiKey } = yield* UTToken;\n      const baseUrl = yield* ApiUrl;\n      const httpClient = (yield* HttpClient.HttpClient).pipe(\n        HttpClient.filterStatusOk,\n      );\n\n      return yield* HttpClientRequest.post(pathname).pipe(\n        HttpClientRequest.prependUrl(baseUrl),\n        HttpClientRequest.bodyUnsafeJson(body),\n        HttpClientRequest.setHeaders({\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n          \"x-uploadthing-be-adapter\": \"server-sdk\",\n          \"x-uploadthing-api-key\": Redacted.value(apiKey),\n        }),\n        httpClient.execute,\n        Effect.tapBoth({\n          onSuccess: logHttpClientResponse(\"UploadThing API Response\"),\n          onFailure: logHttpClientError(\"Failed to request UploadThing API\"),\n        }),\n        Effect.flatMap(HttpClientResponse.schemaBodyJson(responseSchema)),\n        Effect.scoped,\n      );\n    }).pipe(\n      Effect.catchTag(\n        \"ConfigError\",\n        (e) =>\n          new UploadThingError({\n            code: \"INVALID_SERVER_CONFIG\",\n            message:\n              \"There was an error with the server configuration. More info can be found on this error's `cause` property\",\n            cause: e,\n          }),\n      ),\n      Effect.withLogSpan(\"utapi.#requestUploadThing\"),\n    );\n\n  private executeAsync = async <A>(\n    program: Effect.Effect<\n      A,\n      UploadThingError | ParseError | HttpClientError.HttpClientError,\n      HttpClient.HttpClient\n    >,\n    signal?: AbortSignal,\n  ) => {\n    const exit = await program.pipe(\n      Effect.withLogSpan(\"utapi.#executeAsync\"),\n      (e) => this.runtime.runPromiseExit(e, signal ? { signal } : undefined),\n    );\n\n    if (exit._tag === \"Failure\") {\n      throw Cause.squash(exit.cause);\n    }\n\n    return exit.value;\n  };\n\n  /**\n   * Upload files to UploadThing storage.\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */\n  uploadFiles(\n    files: FileEsque,\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult>;\n  uploadFiles(\n    files: FileEsque[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult[]>;\n  uploadFiles(\n    files: FileEsque | FileEsque[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult | UploadFileResult[]> {\n    guardServerOnly();\n\n    const concurrency = opts?.concurrency ?? 1;\n    if (concurrency < 1 || concurrency > 25) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"concurrency must be a positive integer between 1 and 25\",\n      });\n    }\n\n    const program: Effect.Effect<\n      UploadFileResult | UploadFileResult[],\n      never,\n      HttpClient.HttpClient\n    > = Effect.forEach(\n      Arr.ensure(files),\n      (file) =>\n        uploadFile(file, opts ?? {}).pipe(\n          Effect.match({\n            onSuccess: (data) => ({ data, error: null }),\n            onFailure: (error) => ({ data: null, error }),\n          }),\n        ),\n      { concurrency },\n    ).pipe(\n      Effect.map((ups) => (Array.isArray(files) ? ups : ups[0]!)),\n      Effect.tap((res) =>\n        Effect.logDebug(\"Finished uploading\").pipe(\n          Effect.annotateLogs(\"uploadResult\", res),\n        ),\n      ),\n      Effect.withLogSpan(\"uploadFiles\"),\n    );\n\n    return this.executeAsync(program, opts?.signal);\n  }\n\n  /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */\n  uploadFilesFromUrl(\n    urls: MaybeUrl | UrlWithOverrides,\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult>;\n  uploadFilesFromUrl(\n    urls: (MaybeUrl | UrlWithOverrides)[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult[]>;\n  uploadFilesFromUrl(\n    urls: MaybeUrl | UrlWithOverrides | (MaybeUrl | UrlWithOverrides)[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult | UploadFileResult[]> {\n    guardServerOnly();\n\n    const concurrency = opts?.concurrency ?? 1;\n    if (concurrency < 1 || concurrency > 25) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"concurrency must be a positive integer between 1 and 25\",\n      });\n    }\n\n    const program: Effect.Effect<\n      UploadFileResult | UploadFileResult[],\n      never,\n      HttpClient.HttpClient\n    > = Effect.forEach(\n      Arr.ensure(urls),\n      (url) =>\n        downloadFile(url).pipe(\n          Effect.flatMap((file) => uploadFile(file, opts ?? {})),\n          Effect.match({\n            onSuccess: (data) => ({ data, error: null }),\n            onFailure: (error) => ({ data: null, error }),\n          }),\n        ),\n      { concurrency },\n    )\n      .pipe(\n        Effect.map((ups) => (Array.isArray(urls) ? ups : ups[0]!)),\n        Effect.tap((res) =>\n          Effect.logDebug(\"Finished uploading\").pipe(\n            Effect.annotateLogs(\"uploadResult\", res),\n          ),\n        ),\n        Effect.withLogSpan(\"uploadFiles\"),\n      )\n      .pipe(Effect.withLogSpan(\"uploadFilesFromUrl\"));\n\n    return this.executeAsync(program, opts?.signal);\n  }\n\n  /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   *\n   * @example\n   * await deleteFiles(\"myCustomIdentifier\", { keyType: \"customId\" })\n   */\n  deleteFiles = async (keys: string[] | string, opts?: DeleteFilesOptions) => {\n    guardServerOnly();\n    const { keyType = this.defaultKeyType } = opts ?? {};\n\n    class DeleteFileResponse extends S.Class<DeleteFileResponse>(\n      \"DeleteFileResponse\",\n    )({\n      success: S.Boolean,\n      deletedCount: S.Number,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/deleteFiles\",\n        keyType === \"fileKey\"\n          ? { fileKeys: Arr.ensure(keys) }\n          : { customIds: Arr.ensure(keys) },\n        DeleteFileResponse,\n      ).pipe(Effect.withLogSpan(\"deleteFiles\")),\n    );\n  };\n\n  /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   *\n   * @deprecated - See https://docs.uploadthing.com/working-with-files#accessing-files for info how to access files\n   */\n  getFileUrls = async (keys: string[] | string, opts?: GetFileUrlsOptions) => {\n    guardServerOnly();\n\n    const { keyType = this.defaultKeyType } = opts ?? {};\n\n    class GetFileUrlResponse extends S.Class<GetFileUrlResponse>(\n      \"GetFileUrlResponse\",\n    )({\n      data: S.Array(\n        S.Struct({\n          key: S.String,\n          url: S.String,\n        }),\n      ),\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/getFileUrl\",\n        keyType === \"fileKey\"\n          ? { fileKeys: Arr.ensure(keys) }\n          : { customIds: Arr.ensure(keys) },\n        GetFileUrlResponse,\n      ).pipe(Effect.withLogSpan(\"getFileUrls\")),\n    );\n  };\n\n  /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */\n  listFiles = async (opts?: ListFilesOptions) => {\n    guardServerOnly();\n\n    class ListFileResponse extends S.Class<ListFileResponse>(\n      \"ListFileResponse\",\n    )({\n      hasMore: S.Boolean,\n      files: S.Array(\n        S.Struct({\n          id: S.String,\n          customId: S.NullOr(S.String),\n          key: S.String,\n          name: S.String,\n          size: S.Number,\n          status: S.Literal(\n            \"Deletion Pending\",\n            \"Failed\",\n            \"Uploaded\",\n            \"Uploading\",\n          ),\n          uploadedAt: S.Number,\n        }),\n      ),\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/listFiles\",\n        { ...opts },\n        ListFileResponse,\n      ).pipe(Effect.withLogSpan(\"listFiles\")),\n    );\n  };\n\n  renameFiles = async (updates: RenameFileUpdate | RenameFileUpdate[]) => {\n    guardServerOnly();\n\n    class RenameFileResponse extends S.Class<RenameFileResponse>(\n      \"RenameFileResponse\",\n    )({\n      success: S.Boolean,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/renameFiles\",\n        { updates: Arr.ensure(updates) },\n        RenameFileResponse,\n      ).pipe(Effect.withLogSpan(\"renameFiles\")),\n    );\n  };\n\n  getUsageInfo = async () => {\n    guardServerOnly();\n\n    class GetUsageInfoResponse extends S.Class<GetUsageInfoResponse>(\n      \"GetUsageInfoResponse\",\n    )({\n      totalBytes: S.Number,\n      appTotalBytes: S.Number,\n      filesUploaded: S.Number,\n      limitBytes: S.Number,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/getUsageInfo\",\n        {},\n        GetUsageInfoResponse,\n      ).pipe(Effect.withLogSpan(\"getUsageInfo\")),\n    );\n  };\n\n  /**\n   * Generate a presigned url for a private file\n   * Unlike {@link getSignedURL}, this method does not make a fetch request to the UploadThing API\n   * and is the recommended way to generate a presigned url for a private file.\n   **/\n  generateSignedURL = async (key: string, opts?: GetSignedURLOptions) => {\n    guardServerOnly();\n\n    const expiresIn = parseTimeToSeconds(opts?.expiresIn ?? \"5 minutes\");\n\n    if (opts?.expiresIn && isNaN(expiresIn)) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message:\n          \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\",\n      });\n    }\n    if (expiresIn > 86400 * 7) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"expiresIn must be less than 7 days (604800 seconds).\",\n      });\n    }\n\n    const program = Effect.gen(function* () {\n      const { apiKey, appId } = yield* UTToken;\n      const appIdLocation = yield* UfsAppIdLocation;\n      const ufsHost = yield* UfsHost;\n\n      const proto = ufsHost.includes(\"local\") ? \"http\" : \"https\";\n      // either subdomain or path style\n      const urlBase =\n        appIdLocation === \"subdomain\"\n          ? `${proto}://${appId}.${ufsHost}/f/${key}`\n          : `${proto}://${ufsHost}/a/${appId}/${key}`;\n\n      const ufsUrl = yield* generateSignedURL(urlBase, apiKey, {\n        ttlInSeconds: expiresIn,\n      });\n\n      return {\n        ufsUrl,\n      };\n    });\n\n    return await this.executeAsync(\n      program.pipe(\n        Effect.catchTag(\n          \"ConfigError\",\n          (e) =>\n            new UploadThingError({\n              code: \"INVALID_SERVER_CONFIG\",\n              message:\n                \"There was an error with the server configuration. More info can be found on this error's `cause` property\",\n              cause: e,\n            }),\n        ),\n        Effect.withLogSpan(\"generateSignedURL\"),\n      ),\n    );\n  };\n\n  /**\n   * Request a presigned url for a private file(s)\n   * @remarks This method is no longer recommended as it makes a fetch\n   * request to the UploadThing API which incurs redundant latency. It\n   * will be deprecated in UploadThing v8 and removed in UploadThing v9.\n   *\n   * @see {@link generateSignedURL} for a more efficient way to generate a presigned url\n   **/\n  getSignedURL = async (key: string, opts?: GetSignedURLOptions) => {\n    guardServerOnly();\n\n    const expiresIn = opts?.expiresIn\n      ? parseTimeToSeconds(opts.expiresIn)\n      : undefined;\n    const { keyType = this.defaultKeyType } = opts ?? {};\n\n    if (opts?.expiresIn && isNaN(expiresIn!)) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message:\n          \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\",\n      });\n    }\n    if (expiresIn && expiresIn > 86400 * 7) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"expiresIn must be less than 7 days (604800 seconds).\",\n      });\n    }\n\n    class GetSignedUrlResponse extends S.Class<GetSignedUrlResponse>(\n      \"GetSignedUrlResponse\",\n    )({\n      url: S.String,\n      ufsUrl: S.String,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/requestFileAccess\",\n        keyType === \"fileKey\"\n          ? { fileKey: key, expiresIn }\n          : { customId: key, expiresIn },\n        GetSignedUrlResponse,\n      ).pipe(Effect.withLogSpan(\"getSignedURL\")),\n    );\n  };\n\n  /**\n   * Update the ACL of a file or set of files.\n   *\n   * @example\n   * // Make a single file public\n   * await utapi.updateACL(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", \"public-read\");\n   *\n   * // Make multiple files private\n   * await utapi.updateACL(\n   *   [\n   *     \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *     \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n   *   ],\n   *   \"private\",\n   * );\n   */\n  updateACL = async (\n    keys: string | string[],\n    acl: ACL,\n    opts?: ACLUpdateOptions,\n  ) => {\n    guardServerOnly();\n\n    const { keyType = this.defaultKeyType } = opts ?? {};\n    const updates = Arr.ensure(keys).map((key) => {\n      return keyType === \"fileKey\"\n        ? { fileKey: key, acl }\n        : { customId: key, acl };\n    });\n\n    const responseSchema = S.Struct({\n      success: S.Boolean,\n    });\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/updateACL\",\n        { updates },\n        responseSchema,\n      ).pipe(Effect.withLogSpan(\"updateACL\")),\n    );\n  };\n}\n","import * as Effect from \"effect/Effect\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { UploadThingError } from \"@uploadthing/shared\";\n\nimport { makeAdapterHandler } from \"./_internal/handler\";\nimport { extractRouterConfig as extractEffect } from \"./_internal/route-config\";\nimport type { CreateBuilderOptions } from \"./_internal/upload-builder\";\nimport { createBuilder } from \"./_internal/upload-builder\";\nimport type { FileRouter, RouteHandlerOptions } from \"./types\";\n\nexport {\n  UTFiles,\n  /**\n   * This is an experimental feature.\n   * You need to be feature flagged on our backend to use this\n   */\n  UTRegion as experimental_UTRegion,\n} from \"./_internal/types\";\nexport { UTApi } from \"./sdk\";\nexport { UTFile } from \"./sdk/ut-file\";\nexport { UploadThingError, type FileRouter, makeAdapterHandler, createBuilder };\n\ntype AdapterArgs = {\n  req: Request;\n};\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<AdapterArgs, TErrorShape>(opts);\n\nexport const createRouteHandler = <TRouter extends FileRouter>(\n  opts: RouteHandlerOptions<TRouter>,\n) => {\n  return makeAdapterHandler<[Request | { request: Request }], AdapterArgs>(\n    (ev) =>\n      Effect.succeed({\n        req: \"request\" in ev ? ev.request : ev,\n      }),\n    (ev) => Effect.succeed(\"request\" in ev ? ev.request : ev),\n    opts,\n    \"server\",\n  );\n};\n\nexport const extractRouterConfig = (router: FileRouter) =>\n  Effect.runSync(extractEffect(router));\n"],"mappings":"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"}